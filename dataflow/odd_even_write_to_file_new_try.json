{
	"name": "odd_even_write_to_file_new_try",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_emp_in",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_emp_out",
						"type": "DatasetReference"
					},
					"name": "evenFile",
					"rejectedDataLinkedService": {
						"referenceName": "Lnkd_ankitadlsadf",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_emp_out",
						"type": "DatasetReference"
					},
					"name": "oddFile"
				}
			],
			"transformations": [
				{
					"name": "addRowCount"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     this_record as integer (0)",
				"}",
				"source(output(",
				"          empID as string,",
				"          name as string,",
				"          country as string,",
				"          salary as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 keyGenerate(output(record_count as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> addRowCount",
				"derivedColumn1 split(record_count%2==0,",
				"     disjoint: false) ~> split1@(evenFile, oddFile)",
				"addRowCount derive(this_record = $this_record+1) ~> derivedColumn1",
				"split1@evenFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['evenrecs.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          empID,",
				"          name,",
				"          country,",
				"          salary,",
				"          department,",
				"          this_derived_row = this_record",
				"     ),",
				"     partitionBy('hash', 1)) ~> evenFile",
				"split1@oddFile sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['oddrecs.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     mapColumn(",
				"          empID,",
				"          name,",
				"          country,",
				"          salary,",
				"          department,",
				"          this_derived_row = this_record",
				"     ),",
				"     partitionBy('hash', 1)) ~> oddFile"
			]
		}
	}
}