{
	"name": "my_1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_emp_in",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "ds_dept_in",
						"type": "DatasetReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_emp_out",
						"type": "DatasetReference"
					},
					"name": "TargetByJoined"
				}
			],
			"transformations": [
				{
					"name": "getDeptName"
				},
				{
					"name": "select1"
				},
				{
					"name": "SortBySalary"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empID as string,",
				"          name as string,",
				"          country as string,",
				"          salary as integer,",
				"          department as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          deptID as integer,",
				"          deptName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Department",
				"Employee, Department join(department == deptID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> getDeptName",
				"getDeptName select(mapColumn(",
				"          empID,",
				"          name,",
				"          country,",
				"          salary,",
				"          deptID,",
				"          deptName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(desc(salary, true)) ~> SortBySalary",
				"SortBySalary sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['emp_dept_innerjoined.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> TargetByJoined"
			]
		}
	}
}